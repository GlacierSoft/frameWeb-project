/**
 * SyntaxHighlighter
 * http://alexgorbatchev.com/SyntaxHighlighter
 *
 * SyntaxHighlighter is donationware. If you are using it, please donate.
 * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
 *
 * @version
 * 3.0.83 (July 02 2010)
 * 
 * @copyright
 * Copyright (C) 2004-2010 Alex Gorbatchev.
 *
 * @license
 * Dual licensed under the MIT and GPL licenses.
 */
var XRegExp, SyntaxHighlighter; !function () { function a(a, c) { if (!XRegExp.isRegExp(a)) throw TypeError("type RegExp expected"); var d = a._xregexp; return a = XRegExp(a.source, b(a) + (c || "")), d && (a._xregexp = { source: d.source, captureNames: d.captureNames ? d.captureNames.slice(0) : null }), a } function b(a) { return (a.global ? "g" : "") + (a.ignoreCase ? "i" : "") + (a.multiline ? "m" : "") + (a.extended ? "x" : "") + (a.sticky ? "y" : "") } function c(a, b, c, d) { var f, g, j, e = i.length; h = !0; try { for (; e--; ) if (j = i[e], c & j.scope && (!j.trigger || j.trigger.call(d)) && (j.pattern.lastIndex = b, (g = j.pattern.exec(a)) && g.index === b)) { f = { output: j.handler.call(d, g, c), match: g }; break } } catch (k) { throw k } finally { h = !1 } return f } function d(a, b, c) { if (Array.prototype.indexOf) return a.indexOf(b, c); for (c = c || 0; c < a.length; c++) if (a[c] === b) return c; return -1 } XRegExp = function (b, d) { var k, l, e = [], g = XRegExp.OUTSIDE_CLASS, i = 0; if (XRegExp.isRegExp(b)) { if (void 0 !== d) throw TypeError("can't supply flags when constructing one RegExp from another"); return a(b) } if (h) throw Error("can't call the XRegExp constructor within token definition functions"); for (d = d || "", k = { hasNamedCapture: !1, captureNames: [], hasFlag: function (a) { return d.indexOf(a) > -1 }, setFlag: function (a) { d += a } }; i < b.length; ) (l = c(b, i, g, k)) ? (e.push(l.output), i += l.match[0].length || 1) : (l = j.exec.call(o[g], b.slice(i))) ? (e.push(l[0]), i += l[0].length) : (l = b.charAt(i), "[" === l ? g = XRegExp.INSIDE_CLASS : "]" === l && (g = XRegExp.OUTSIDE_CLASS), e.push(l), i++); return e = RegExp(e.join(""), j.replace.call(d, f, "")), e._xregexp = { source: b, captureNames: k.hasNamedCapture ? k.captureNames : null }, e }, XRegExp.version = "1.5.0", XRegExp.INSIDE_CLASS = 1, XRegExp.OUTSIDE_CLASS = 2; var e = /\$(?:(\d\d?|[$&`'])|{([$\w]+)})/g, f = /[^gimy]+|([\s\S])(?=[\s\S]*\1)/g, g = /^(?:[?*+]|{\d+(?:,\d*)?})\??/, h = !1, i = [], j = { exec: RegExp.prototype.exec, test: RegExp.prototype.test, match: String.prototype.match, replace: String.prototype.replace, split: String.prototype.split }, k = void 0 === j.exec.call(/()??/, "")[1], l = function () { var a = /^/g; return j.test.call(a, ""), !a.lastIndex } (), m = function () { var a = /x/g; return j.replace.call("x", a, ""), !a.lastIndex } (), n = void 0 !== RegExp.prototype.sticky, o = {}; o[XRegExp.INSIDE_CLASS] = /^(?:\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S]))/, o[XRegExp.OUTSIDE_CLASS] = /^(?:\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S])|\(\?[:=!]|[?*+]\?|{\d+(?:,\d*)?}\??)/, XRegExp.addToken = function (b, c, d, e) { i.push({ pattern: a(b, "g" + (n ? "y" : "")), handler: c, scope: d || XRegExp.OUTSIDE_CLASS, trigger: e || null }) }, XRegExp.cache = function (a, b) { var c = a + "/" + (b || ""); return XRegExp.cache[c] || (XRegExp.cache[c] = XRegExp(a, b)) }, XRegExp.copyAsGlobal = function (b) { return a(b, "g") }, XRegExp.escape = function (a) { return a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") }, XRegExp.execAt = function (b, c, d, e) { return c = a(c, "g" + (e && n ? "y" : "")), c.lastIndex = d = d || 0, b = c.exec(b), e ? b && b.index === d ? b : null : b }, XRegExp.freezeTokens = function () { XRegExp.addToken = function () { throw Error("can't run addToken after freezeTokens") } }, XRegExp.isRegExp = function (a) { return "[object RegExp]" === Object.prototype.toString.call(a) }, XRegExp.iterate = function (b, c, d, e) { for (var h, f = a(c, "g"), g = -1; h = f.exec(b); ) d.call(e, h, ++g, b, f), f.lastIndex === h.index && f.lastIndex++; c.global && (c.lastIndex = 0) }, XRegExp.matchChain = function (b, c) { return function d(b, e) { var i, f = c[e].regex ? c[e] : { regex: c[e] }, g = a(f.regex, "g"), h = []; for (i = 0; i < b.length; i++) XRegExp.iterate(b[i], g, function (a) { h.push(f.backref ? a[f.backref] || "" : a[0]) }); return e !== c.length - 1 && h.length ? d(h, e + 1) : h } ([b], 0) }, RegExp.prototype.apply = function (a, b) { return this.exec(b[0]) }, RegExp.prototype.call = function (a, b) { return this.exec(b) }, RegExp.prototype.exec = function (a) { var e, f, c = j.exec.apply(this, arguments); if (c) { if (!k && c.length > 1 && d(c, "") > -1 && (e = RegExp(this.source, j.replace.call(b(this), "g", "")), j.replace.call(a.toString().slice(c.index), e, function () { for (var a = 1; a < arguments.length - 2; a++) void 0 === arguments[a] && (c[a] = void 0) })), this._xregexp && this._xregexp.captureNames) for (f = 1; f < c.length; f++) (e = this._xregexp.captureNames[f - 1]) && (c[e] = c[f]); !l && this.global && !c[0].length && this.lastIndex > c.index && this.lastIndex-- } return c }, l || (RegExp.prototype.test = function (a) { return (a = j.exec.call(this, a)) && this.global && !a[0].length && this.lastIndex > a.index && this.lastIndex--, !!a }), String.prototype.match = function (a) { if (XRegExp.isRegExp(a) || (a = RegExp(a)), a.global) { var b = j.match.apply(this, arguments); return a.lastIndex = 0, b } return a.exec(this) }, String.prototype.replace = function (a, b) { var f, g, c = XRegExp.isRegExp(a); return c && "string" == typeof b.valueOf() && -1 === b.indexOf("${") && m ? j.replace.apply(this, arguments) : (c ? a._xregexp && (f = a._xregexp.captureNames) : a += "", "function" == typeof b ? g = j.replace.call(this, a, function () { if (f) { arguments[0] = new String(arguments[0]); for (var d = 0; d < f.length; d++) f[d] && (arguments[0][f[d]] = arguments[d + 1]) } return c && a.global && (a.lastIndex = arguments[arguments.length - 2] + arguments[0].length), b.apply(null, arguments) }) : (g = this + "", g = j.replace.call(g, a, function () { var a = arguments; return j.replace.call(b, e, function (b, c, e) { if (!c) return c = +e, c <= a.length - 3 ? a[c] : (c = f ? d(f, e) : -1, c > -1 ? a[c + 1] : b); switch (c) { case "$": return "$"; case "&": return a[0]; case "`": return a[a.length - 1].slice(0, a[a.length - 2]); case "'": return a[a.length - 1].slice(a[a.length - 2] + a[0].length); default: if (e = "", c = +c, !c) return b; for (; c > a.length - 3; ) e = String.prototype.slice.call(c, -1) + e, c = Math.floor(c / 10); return (c ? a[c] || "" : "$") + e } }) })), c && a.global && (a.lastIndex = 0), g) }, String.prototype.split = function (a, b) { if (!XRegExp.isRegExp(a)) return j.split.apply(this, arguments); var f, g, c = this + "", d = [], e = 0; if (void 0 === b || 0 > +b) b = 1 / 0; else if (b = Math.floor(+b), !b) return []; for (a = XRegExp.copyAsGlobal(a); (f = a.exec(c)) && !(a.lastIndex > e && (d.push(c.slice(e, f.index)), f.length > 1 && f.index < c.length && Array.prototype.push.apply(d, f.slice(1)), g = f[0].length, e = a.lastIndex, d.length >= b)); ) a.lastIndex === f.index && a.lastIndex++; return e === c.length ? (!j.test.call(a, "") || g) && d.push("") : d.push(c.slice(e)), d.length > b ? d.slice(0, b) : d }, XRegExp.addToken(/\(\?#[^)]*\)/, function (a) { return j.test.call(g, a.input.slice(a.index + a[0].length)) ? "" : "(?:)" }), XRegExp.addToken(/\((?!\?)/, function () { return this.captureNames.push(null), "(" }), XRegExp.addToken(/\(\?<([$\w]+)>/, function (a) { return this.captureNames.push(a[1]), this.hasNamedCapture = !0, "(" }), XRegExp.addToken(/\\k<([\w$]+)>/, function (a) { var b = d(this.captureNames, a[1]); return b > -1 ? "\\" + (b + 1) + (isNaN(a.input.charAt(a.index + a[0].length)) ? "" : "(?:)") : a[0] }), XRegExp.addToken(/\[\^?]/, function (a) { return "[]" === a[0] ? "\\b\\B" : "[\\s\\S]" }), XRegExp.addToken(/^\(\?([imsx]+)\)/, function (a) { return this.setFlag(a[1]), "" }), XRegExp.addToken(/(?:\s+|#.*)+/, function (a) { return j.test.call(g, a.input.slice(a.index + a[0].length)) ? "" : "(?:)" }, XRegExp.OUTSIDE_CLASS, function () { return this.hasFlag("x") }), XRegExp.addToken(/\./, function () { return "[\\s\\S]" }, XRegExp.OUTSIDE_CLASS, function () { return this.hasFlag("s") }) } (), SyntaxHighlighter = function () { function b(a, b) { return -1 != a.className.indexOf(b) } function c(a, c) { b(a, c) || (a.className += " " + c) } function d(a, b) { a.className = a.className.replace(b, "") } function e(a) { var c, b = []; for (c = 0; c < a.length; c++) b.push(a[c]); return b } function f(a) { return a.split("\n") } function g(a) { var b = "highlighter_"; return 0 == a.indexOf(b) ? a : b + a } function h(b) { return a.vars.highlighters[g(b)] } function i(a) { return document.getElementById(g(a)) } function j(b) { a.vars.highlighters[g(b.id)] = b } function k(a, b, c) { var f, g, d, e, h; if (null == a) return null; if (d = 1 != c ? a.childNodes : [a.parentNode], e = { "#": "id", ".": "className"}[b.substr(0, 1)] || "nodeName", f = "nodeName" != e ? b.substr(1) : b.toUpperCase(), -1 != (a[e] || "").indexOf(f)) return a; for (h = 0; d && h < d.length && null == g; h++) g = k(d[h], b, c); return g } function l(a, b) { return k(a, b, !0) } function m(a, b, c) { c = Math.max(c || 0, 0); for (var d = c; d < a.length; d++) if (a[d] == b) return d; return -1 } function n(a) { return (a || "") + Math.round(1e6 * Math.random()).toString() } function o(a, b) { var d, c = {}; for (d in a) c[d] = a[d]; for (d in b) c[d] = b[d]; return c } function p(a) { var b = { "true": !0, "false": !1}[a]; return null == b ? a : b } function q(a, b, c, d, e) { var h, f = (screen.width - c) / 2, g = (screen.height - d) / 2; return e += ", left=" + f + ", top=" + g + ", width=" + c + ", height=" + d, e = e.replace(/^,/, ""), h = window.open(a, b, e), h.focus(), h } function r(a, b, c, d) { function e(a) { a = a || window.event, a.target || (a.target = a.srcElement, a.preventDefault = function () { this.returnValue = !1 }), c.call(d || window, a) } a.attachEvent ? a.attachEvent("on" + b, e) : a.addEventListener(b, e, !1) } function s(b) { window.alert(a.config.strings.alert + b) } function t(b, c) { var f, g, h, i, d = a.vars.discoveredBrushes, e = null; if (null == d) { d = {}; for (f in a.brushes) if (g = a.brushes[f], h = g.aliases, null != h) for (g.brushName = f.toLowerCase(), i = 0; i < h.length; i++) d[h[i]] = f; a.vars.discoveredBrushes = d } return e = a.brushes[d[b]], null == e && 0 != c && s(a.config.strings.noBrush + b), e } function u(a, b) { var d, c = f(a); for (d = 0; d < c.length; d++) c[d] = b(c[d], d); return c.join("\n") } function v(a) { return a.replace(/^[ ]*[\n]+|[\n]*[ ]*$/g, "") } function w(a) { for (var b, f, g, c = {}, d = new XRegExp("^\\[(?<values>(.*?))\\]$"), e = new XRegExp("(?<name>[\\w-]+)\\s*:\\s*(?<value>[\\w-%#]+|\\[.*?\\]|\".*?\"|'.*?')\\s*;?", "g"); null != (b = e.exec(a)); ) f = b.value.replace(/^['"]|['"]$/g, ""), null != f && d.test(f) && (g = d.exec(f), f = g.values.length > 0 ? g.values.split(/\s*,\s*/) : []), c[b.name] = f; return c } function x(b, c) { return null == b || 0 == b.length || "\n" == b ? b : (b = b.replace(/</g, "&lt;"), b = b.replace(/ {2,}/g, function (b) { var d, c = ""; for (d = 0; d < b.length - 1; d++) c += a.config.space; return c + " " }), null != c && (b = u(b, function (a) { if (0 == a.length) return ""; var b = ""; return a = a.replace(/^(&nbsp;| )+/, function (a) { return b = a, "" }), 0 == a.length ? b : b + '<code class="' + c + '">' + a + "</code>" })), b) } function y(a, b) { for (var c = a.toString(); c.length < b; ) c = "0" + c; return c } function z(a, b) { var d, c = ""; for (d = 0; b > d; d++) c += " "; return a.replace(/\t/g, c) } function A(a, b) { function h(a, b, c) { return a.substr(0, b) + e.substr(0, c) + a.substr(b + 1, a.length) } var g, d = (f(a), "	"), e = ""; for (g = 0; 50 > g; g++) e += "                    "; return a = u(a, function (a) { var c, e; if (-1 == a.indexOf(d)) return a; for (c = 0; -1 != (c = a.indexOf(d)); ) e = b - c % b, a = h(a, c, e); return a }) } function B(b) { var c = /<br\s*\/?>|&lt;br\s*\/?&gt;/gi; return 1 == a.config.bloggerMode && (b = b.replace(c, "\n")), 1 == a.config.stripBrs && (b = b.replace(c, "")), b } function C(a) { return a.replace(/^\s+|\s+$/g, "") } function D(a) { var g, h, i, b = f(B(a)), d = (new Array, /^\s*/), e = 1e3; for (g = 0; g < b.length && e > 0; g++) if (h = b[g], 0 != C(h).length) { if (i = d.exec(h), null == i) return a; e = Math.min(i[0].length, e) } if (e > 0) for (g = 0; g < b.length; g++) b[g] = b[g].substr(e); return b.join("\n") } function E(a, b) { return a.index < b.index ? -1 : a.index > b.index ? 1 : a.length < b.length ? -1 : a.length > b.length ? 1 : 0 } function F(b, c) { function d(a) { return a[0] } for (var i, f = null, g = [], h = c.func ? c.func : d; null != (f = c.regex.exec(b)); ) i = h(f, c), "string" == typeof i && (i = [new a.Match(i, f.index, c.css)]), g = g.concat(i); return g } function G(b) { var c = /(.*)((&gt;|&lt;).*)/; return b.replace(a.regexLib.url, function (a) { var b = "", d = null; return (d = c.exec(a)) && (a = d[1], b = d[2]), '<a href="' + a + '">' + a + "</a>" + b }) } function H() { var c, a = document.getElementsByTagName("script"), b = []; for (c = 0; c < a.length; c++) "syntaxhighlighter" == a[c].type && b.push(a[c]); return b } function I(a) { var h, b = "<![CDATA[", c = "]]>", d = C(a), e = !1, f = b.length, g = c.length; return 0 == d.indexOf(b) && (d = d.substring(f), e = !0), h = d.length, d.indexOf(c) == h - g && (d = d.substring(0, h - g), e = !0), e ? d : a } function J(a) { var i, j, m, n, b = a.target, e = l(b, ".syntaxhighlighter"), f = l(b, ".container"), g = document.createElement("textarea"); if (f && e && !k(f, "textarea")) { for (i = h(e.id), c(e, "source"), j = f.childNodes, m = [], n = 0; n < j.length; n++) m.push(j[n].innerText || j[n].textContent); m = m.join("\r"), g.appendChild(document.createTextNode(m)), f.appendChild(g), g.focus(), g.select(), r(g, "blur", function () { g.parentNode.removeChild(g), d(e, "source") }) } } "undefined" != typeof require && "undefined" == typeof XRegExp && (XRegExp = require("XRegExp").XRegExp); var a = { defaults: { "class-name": "", "first-line": 1, "pad-line-numbers": !1, highlight: null, title: null, "smart-tabs": !0, "tab-size": 4, gutter: !0, toolbar: !0, "quick-code": !0, collapse: !1, "auto-links": !0, light: !1, "html-script": !1 }, config: { space: "&nbsp;", useScriptTags: !0, bloggerMode: !1, stripBrs: !1, tagName: "pre", strings: { expandSource: "expand source", help: "?", alert: "SyntaxHighlighter\n\n", noBrush: "Can't find brush for: ", brushNotHtmlScript: "Brush wasn't configured for html-script option: ", aboutDialog: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About SyntaxHighlighter</title></head><body style="font-family:Geneva,Arial,Helvetica,sans-serif;background-color:#fff;color:#000;font-size:1em;text-align:center;"><div style="text-align:center;margin-top:1.5em;"><div style="font-size:xx-large;">SyntaxHighlighter</div><div style="font-size:.75em;margin-bottom:3em;"><div>version 3.0.83 (July 02 2010)</div><div><a href="http://alexgorbatchev.com/SyntaxHighlighter" target="_blank" style="color:#005896">http://alexgorbatchev.com/SyntaxHighlighter</a></div><div>JavaScript code syntax highlighter.</div><div>Copyright 2004-2010 Alex Gorbatchev.</div></div><div>If you like this script, please <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2930402" style="color:#005896">donate</a> to <br/>keep development active!</div></div></body></html>'} }, vars: { discoveredBrushes: null, highlighters: {} }, brushes: {}, regexLib: { multiLineCComments: /\/\*[\s\S]*?\*\//gm, singleLineCComments: /\/\/.*$/gm, singleLinePerlComments: /#.*$/gm, doubleQuotedString: /"([^\\"\n]|\\.)*"/g, singleQuotedString: /'([^\\'\n]|\\.)*'/g, multiLineDoubleQuotedString: new XRegExp('"([^\\\\"]|\\\\.)*"', "gs"), multiLineSingleQuotedString: new XRegExp("'([^\\\\']|\\\\.)*'", "gs"), xmlComments: /(&lt;|<)!--[\s\S]*?--(&gt;|>)/gm, url: /\w+:\/\/[\w-.\/?%&=:@;]*/g, phpScriptTags: { left: /(&lt;|<)\?=?/g, right: /\?(&gt;|>)/g }, aspScriptTags: { left: /(&lt;|<)%=?/g, right: /%(&gt;|>)/g }, scriptScriptTags: { left: /(&lt;|<)\s*script.*?(&gt;|>)/gi, right: /(&lt;|<)\/\s*script\s*(&gt;|>)/gi} }, toolbar: { getHtml: function (b) { function f(b, c) { return a.toolbar.getButtonHtml(b, c, a.config.strings[c]) } var g, c = '<div class="toolbar">', d = a.toolbar.items, e = d.list; for (g = 0; g < e.length; g++) c += (d[e[g]].getHtml || f)(b, e[g]); return c += "</div>" }, getButtonHtml: function (a, b, c) { return '<span><a href="#" class="toolbar_item command_' + b + " " + b + '">' + c + "</a></span>" }, handler: function (b) { function e(a) { var b = new RegExp(a + "_(\\w+)"), c = b.exec(d); return c ? c[1] : null } var c = b.target, d = c.className || "", f = h(l(c, ".syntaxhighlighter").id), g = e("command"); f && g && a.toolbar.items[g].execute(f), b.preventDefault() }, items: { list: ["expandSource", "help"], expandSource: { getHtml: function (b) { if (1 != b.getParam("collapse")) return ""; var c = b.getParam("title"); return a.toolbar.getButtonHtml(b, "expandSource", c ? c : a.config.strings.expandSource) }, execute: function (a) { var b = i(a.id); d(b, "collapsed") } }, help: { execute: function () { var c = q("", "_blank", 500, 250, "scrollbars=0"), d = c.document; d.write(a.config.strings.aboutDialog), d.close(), c.focus() } }} }, findElements: function (b, c) { var h, i, d = c ? [c] : e(document.getElementsByTagName(a.config.tagName)), f = a.config, g = []; if (f.useScriptTags && (d = d.concat(H())), 0 === d.length) return g; for (h = 0; h < d.length; h++) i = { target: d[h], params: o(b, w(d[h].className)) }, null != i.params.brush && g.push(i); return g }, highlight: function (b, c) { var h, l, i, j, k, m, d = this.findElements(b, c), e = "innerHTML", f = null, g = a.config; if (0 !== d.length) for (h = 0; h < d.length; h++) if (c = d[h], i = c.target, j = c.params, k = j.brush, null != k) { if ("true" == j["html-script"] || 1 == a.defaults["html-script"]) f = new a.HtmlScript(k), k = "htmlscript"; else { if (m = t(k), !m) continue; f = new m } l = i[e], g.useScriptTags && (l = I(l)), "" != (i.title || "") && (j.title = i.title), j.brush = k, f.init(j), c = f.getDiv(l), "" != (i.id || "") && (c.id = i.id), i.parentNode.replaceChild(c, i) } }, all: function (b) { r(window, "load", function () { a.highlight(b) }) } }; return a.all = a.all, a.highlight = a.highlight, a.Match = function (a, b, c) { this.value = a, this.index = b, this.length = a.length, this.css = c, this.brushName = null }, a.Match.prototype.toString = function () { return this.value }, a.HtmlScript = function (b) { function j(a, b) { for (var c = 0; c < a.length; c++) a[c].index += b } function k(a) { var k, l, m, e = a.code, f = [], g = d.regexList, h = a.index + a.left.length, i = d.htmlScript; for (l = 0; l < g.length; l++) k = F(e, g[l]), j(k, h), f = f.concat(k); for (null != i.left && null != a.left && (k = F(a.left, i.left), j(k, a.index), f = f.concat(k)), null != i.right && null != a.right && (k = F(a.right, i.right), j(k, a.index + a[0].lastIndexOf(a.right)), f = f.concat(k)), m = 0; m < f.length; m++) f[m].brushName = c.brushName; return f } var d, i, c = t(b), e = new a.brushes.Xml, g = this, h = "getDiv getHtml init".split(" "); if (null != c) { for (d = new c, i = 0; i < h.length; i++) !function () { var a = h[i]; g[a] = function () { return e[a].apply(e, arguments) } } (); return null == d.htmlScript ? (s(a.config.strings.brushNotHtmlScript + b), void 0) : (e.regexList.push({ regex: d.htmlScript.code, func: k }), void 0) } }, a.Highlighter = function () { }, a.Highlighter.prototype = { getParam: function (a, b) { var c = this.params[a]; return p(null == c ? b : c) }, create: function (a) { return document.createElement(a) }, findMatches: function (a, b) { var d, c = []; if (null != a) for (d = 0; d < a.length; d++) "object" == typeof a[d] && (c = c.concat(F(b, a[d]))); return this.removeNestedMatches(c.sort(E)) }, removeNestedMatches: function (a) { var b, c, d, e, f; for (b = 0; b < a.length; b++) if (null !== a[b]) for (c = a[b], d = c.index + c.length, e = b + 1; e < a.length && null !== a[b]; e++) if (f = a[e], null !== f) { if (f.index > d) break; f.index == c.index && f.length > c.length ? a[b] = null : f.index >= c.index && f.index < d && (a[e] = null) } return a }, figureOutLineNumbers: function (a) { var b = [], c = parseInt(this.getParam("first-line")); return u(a, function (a, d) { b.push(d + c) }), b }, isLineHighlighted: function (a) { var b = this.getParam("highlight", []); return "object" != typeof b && null == b.push && (b = [b]), -1 != m(b, a.toString()) }, getLineHtml: function (a, b, c) { var d = ["line", "number" + b, "index" + a, "alt" + (0 == b % 2 ? 1 : 2).toString()]; return this.isLineHighlighted(b) && d.push("highlighted"), 0 == b && d.push("break"), '<div class="' + d.join(" ") + '">' + c + "</div>" }, getLineNumbersHtml: function (b, c) { var i, j, d = "", e = f(b).length, g = parseInt(this.getParam("first-line")), h = this.getParam("pad-line-numbers"); for (1 == h ? h = (g + e - 1).toString().length : 1 == isNaN(h) && (h = 0), i = 0; e > i; i++) j = c ? c[i] : g + i, b = 0 == j ? a.config.space : y(j, h), d += this.getLineHtml(i, j, b); return d }, getCodeLinesHtml: function (b, c) { var d, g, h, i, j, k, l, m; for (b = C(b), d = f(b), this.getParam("pad-line-numbers"), g = parseInt(this.getParam("first-line")), b = "", h = this.getParam("brush"), i = 0; i < d.length; i++) j = d[i], k = /^(&nbsp;|\s)+/.exec(j), l = null, m = c ? c[i] : g + i, null != k && (l = k[0].toString(), j = j.substr(l.length), l = l.replace(" ", a.config.space)), j = C(j), 0 == j.length && (j = a.config.space), b += this.getLineHtml(i, m, (null != l ? '<code class="' + h + ' spaces">' + l + "</code>" : "") + j); return b }, getTitleHtml: function (a) { return a ? "<caption>" + a + "</caption>" : "" }, getMatchesHtml: function (a, b) { function f(a) { var b = a ? a.brushName || e : e; return b ? b + " " : "" } var g, i, h, c = 0, d = "", e = this.getParam("brush", ""); for (g = 0; g < b.length; g++) h = b[g], null !== h && 0 !== h.length && (i = f(h), d += x(a.substr(c, h.index - c), i + "plain") + x(h.value, i + h.css), c = h.index + h.length + (h.offset || 0)); return d += x(a.substr(c), f() + "plain") }, getHtml: function (b) { var e, f, h, c = "", d = ["syntaxhighlighter"]; return 1 == this.getParam("light") && (this.params.toolbar = this.params.gutter = !1), className = "syntaxhighlighter", 1 == this.getParam("collapse") && d.push("collapsed"), 0 == (gutter = this.getParam("gutter")) && d.push("nogutter"), d.push(this.getParam("class-name")), d.push(this.getParam("brush")), b = v(b).replace(/\r/g, " "), e = this.getParam("tab-size"), b = 1 == this.getParam("smart-tabs") ? A(b, e) : z(b, e), b = D(b), gutter && (h = this.figureOutLineNumbers(b)), f = this.findMatches(this.regexList, b), c = this.getMatchesHtml(b, f), c = this.getCodeLinesHtml(c, h), this.getParam("auto-links") && (c = G(c)), "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.match(/MSIE/) && d.push("ie"), c = '<div id="' + g(this.id) + '" class="' + d.join(" ") + '">' + (this.getParam("toolbar") ? a.toolbar.getHtml(this) : "") + '<table border="0" cellpadding="0" cellspacing="0">' + this.getTitleHtml(this.getParam("title")) + "<tbody>" + "<tr>" + (gutter ? '<td class="gutter">' + this.getLineNumbersHtml(b) + "</td>" : "") + '<td class="code">' + '<div class="container">' + c + "</div>" + "</td>" + "</tr>" + "</tbody>" + "</table>" + "</div>" }, getDiv: function (b) { null === b && (b = ""), this.code = b; var c = this.create("div"); return c.innerHTML = this.getHtml(b), this.getParam("toolbar") && r(k(c, ".toolbar"), "click", a.toolbar.handler), this.getParam("quick-code") && r(k(c, ".code"), "dblclick", J), c }, init: function (b) { this.id = n(), j(this), this.params = o(a.defaults, b || {}), 1 == this.getParam("light") && (this.params.toolbar = this.params.gutter = !1) }, getKeywords: function (a) { return a = a.replace(/^\s+|\s+$/g, "").replace(/\s+/g, "|"), "\\b(?:" + a + ")\\b" }, forHtmlScript: function (a) { this.htmlScript = { left: { regex: a.left, css: "script" }, right: { regex: a.right, css: "script" }, code: new XRegExp("(?<left>" + a.left.source + ")" + "(?<code>.*?)" + "(?<right>" + a.right.source + ")", "sgi")} } }, a } (), "undefined" != typeof exports ? exports.SyntaxHighlighter = SyntaxHighlighter : null;
